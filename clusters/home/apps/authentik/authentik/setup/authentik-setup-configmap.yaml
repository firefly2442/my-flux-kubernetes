apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-setup-script
  namespace: authentik
data:
  setup-authentik.py: |
    import os
    import time
    import requests
    import json

    AUTHENTIK_API_URL = os.environ["AUTHENTIK_API_URL"]
    AUTHENTIK_URL = os.environ["AUTHENTIK_URL"]
    AUTHENTIK_TOKEN = os.environ["AUTHENTIK_BOOTSTRAP_TOKEN"]
    HEADERS = {
        "Authorization": f"Bearer {AUTHENTIK_TOKEN}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }


    def wait_for_ready():
        print("Waiting for Authentik to be ready...")
        while True:
            try:
                r = requests.get(f"{AUTHENTIK_URL}/-/health/ready/")
                if r.ok:
                    break
            except Exception:
                pass
            time.sleep(30)
        print("‚úÖ Authentik is ready.")


    def get_id(url, key="pk"):
        r = requests.get(url, headers=HEADERS).json()
        print(json.dumps(r, indent=2))
        return r["results"][0][key] if r.get("results") else None


    def create_or_get(url, payload, key="pk"):
        r = requests.get(f"{url}?search={payload['name']}", headers=HEADERS).json()
        if r.get("results"):
            print(f"‚úÖ Found {payload['name']}")
            return r["results"][0][key]
        print(f"Creating {payload['name']}...")
        r = requests.post(url, headers=HEADERS, json=payload).json()
        print(json.dumps(r, indent=2))
        return r[key]


    if __name__ == "__main__":
        wait_for_ready()

        authorization_flow_id = get_id(
            f"{AUTHENTIK_API_URL}/flows/instances/?slug=default-provider-authorization-implicit-consent"
        )
        if not authorization_flow_id:
            print("‚ùå Missing authorization flow")
            exit(1)
        else:
            print(f"Authorization flow id: {authorization_flow_id}")

        invalidation_flow_id = get_id(
            f"{AUTHENTIK_API_URL}/flows/instances/?slug=default-provider-invalidation-flow"
        )
        if not invalidation_flow_id:
            print("‚ùå Missing invalidation flow")
            exit(1)
        else:
            print(f"Invalidation flow id: {invalidation_flow_id}")

        provider_id = create_or_get(
            f"{AUTHENTIK_API_URL}/providers/proxy/",
            {
                "name": "podinfo-forwardauth",
                "authorization_flow": authorization_flow_id,
                "invalidation_flow": invalidation_flow_id,
                "external_host": "https://podinfo.homelab.rivetcode.com",
                "mode": "forward_single",
                "cookie_domain": "homelab.rivetcode.com",
                "preserve_path": True,
            },
        )

        outpost_id = create_or_get(
            f"{AUTHENTIK_API_URL}/outposts/instances/",
            {"name": "authentik-outpost", "type": "proxy"},
        )

        app_id = create_or_get(
            f"{AUTHENTIK_API_URL}/core/applications/",
            {
                "name": "podinfo",
                "slug": "podinfo",
                "provider": f"/api/v3/providers/proxy/{provider_id}/",
                "authorization_flow": authorization_flow_id,
                "meta_launch_url": "https://podinfo.homelab.rivetcode.com",
                "outpost": f"/api/v3/outposts/{outpost_id}/",
            },
        )

        print("üéâ Authentik setup complete.")
